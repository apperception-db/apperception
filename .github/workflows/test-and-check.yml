name: Test and Type Check
on:
  push:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
    services:
      mobilitydb:
        image: mobilitydb/mobilitydb:latest
        ports:
          - 25432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mobilitydb-road:
        image: mobilitydb/mobilitydb:latest
        ports:
          - 25433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mobilitydb-reset:
        image: mobilitydb/mobilitydb:latest
        ports:
          - 25434:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mobilitydb-import:
        image: mobilitydb/mobilitydb:latest
        ports:
          - 25435:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mobilitydb-sql:
        image: mobilitydb/mobilitydb:latest
        ports:
          - 25436:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT || github.token }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
          virtualenvs-prefer-active-python: true

      - name: Cache Poetry virtualenv
        uses: actions/cache@v2
        id: cached-poetry-dependencies 
        with:
          path: .venv
          key: poetry-venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Check Python version
        run: poetry run python --version

      - name: Extend MobilityDB with User-Defined functions
        run: |
          pushd pg_extender
          psql -h localhost -p 25432 -d mobilitydb -U docker -c "\i install.sql;"
          psql -h localhost -p 25433 -d mobilitydb -U docker -c "\i install.sql;"
          psql -h localhost -p 25434 -d mobilitydb -U docker -c "\i install.sql;"
          psql -h localhost -p 25435 -d mobilitydb -U docker -c "\i install.sql;"
          psql -h localhost -p 25436 -d mobilitydb -U docker -c "\i install.sql;"
          popd
        env:
          PGPASSWORD: docker
      
      - name: Ingest data
        run: |
          poetry run python -c "from apperception.utils import import_tables; from apperception.database import database; import_tables(database, './data/scenic/database')"
          poetry run python -c "from apperception.utils import ingest_road; from apperception.database import database; ingest_road(database, './data/scenic/road_network_boston')"
        env:
          AP_PORT: 25432
      
      - name: Generate Image data
        run: |
          poetry run python scripts/fake-images.py
      
      - name: Unit Test
        run: poetry run pytest --cov=apperception --cov-report=xml tests tests-scenic
        env:
          AP_PORT: 25432
          AP_PORT_ROAD: 25433
          AP_PORT_RESET: 25434
          AP_PORT_IMPORT: 25435
          AP_PORT_SQL: 25436
      
      - name: Upload coverage reports to Codecov
        run: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov -t ${{ secrets.CODECOV_TOKEN }}
  check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT || github.token }}

      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Cache Poetry virtualenv
        uses: actions/cache@v2
        id: cached-poetry-dependencies 
        with:
          path: .venv
          key: poetry-venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction
      
      - name: Type Check with mypy
        if: always()
        run: yes | poetry run mypy --install-types apperception || poetry run mypy apperception
      
      - name: Type Check with pyright
        if: always()
        run: poetry run pyright apperception